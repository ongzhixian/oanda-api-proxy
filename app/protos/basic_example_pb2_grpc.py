# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protos.basic_example_pb2 as basic__example__pb2


class BasicExampleStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UnaryApi = channel.unary_unary(
                '/basicExample.BasicExample/UnaryApi',
                request_serializer=basic__example__pb2.BasicExampleRequest.SerializeToString,
                response_deserializer=basic__example__pb2.BasicExampleResponse.FromString,
                )
        self.ServerStreamingApi = channel.unary_stream(
                '/basicExample.BasicExample/ServerStreamingApi',
                request_serializer=basic__example__pb2.BasicExampleRequest.SerializeToString,
                response_deserializer=basic__example__pb2.BasicExampleResponse.FromString,
                )
        self.ClientStreamingApi = channel.stream_unary(
                '/basicExample.BasicExample/ClientStreamingApi',
                request_serializer=basic__example__pb2.BasicExampleRequest.SerializeToString,
                response_deserializer=basic__example__pb2.BasicExampleResponse.FromString,
                )
        self.DuplexStreamingApi = channel.stream_stream(
                '/basicExample.BasicExample/DuplexStreamingApi',
                request_serializer=basic__example__pb2.BasicExampleRequest.SerializeToString,
                response_deserializer=basic__example__pb2.BasicExampleResponse.FromString,
                )


class BasicExampleServicer(object):
    """The greeting service definition.
    """

    def UnaryApi(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerStreamingApi(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClientStreamingApi(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DuplexStreamingApi(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BasicExampleServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UnaryApi': grpc.unary_unary_rpc_method_handler(
                    servicer.UnaryApi,
                    request_deserializer=basic__example__pb2.BasicExampleRequest.FromString,
                    response_serializer=basic__example__pb2.BasicExampleResponse.SerializeToString,
            ),
            'ServerStreamingApi': grpc.unary_stream_rpc_method_handler(
                    servicer.ServerStreamingApi,
                    request_deserializer=basic__example__pb2.BasicExampleRequest.FromString,
                    response_serializer=basic__example__pb2.BasicExampleResponse.SerializeToString,
            ),
            'ClientStreamingApi': grpc.stream_unary_rpc_method_handler(
                    servicer.ClientStreamingApi,
                    request_deserializer=basic__example__pb2.BasicExampleRequest.FromString,
                    response_serializer=basic__example__pb2.BasicExampleResponse.SerializeToString,
            ),
            'DuplexStreamingApi': grpc.stream_stream_rpc_method_handler(
                    servicer.DuplexStreamingApi,
                    request_deserializer=basic__example__pb2.BasicExampleRequest.FromString,
                    response_serializer=basic__example__pb2.BasicExampleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'basicExample.BasicExample', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BasicExample(object):
    """The greeting service definition.
    """

    @staticmethod
    def UnaryApi(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/basicExample.BasicExample/UnaryApi',
            basic__example__pb2.BasicExampleRequest.SerializeToString,
            basic__example__pb2.BasicExampleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerStreamingApi(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/basicExample.BasicExample/ServerStreamingApi',
            basic__example__pb2.BasicExampleRequest.SerializeToString,
            basic__example__pb2.BasicExampleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClientStreamingApi(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/basicExample.BasicExample/ClientStreamingApi',
            basic__example__pb2.BasicExampleRequest.SerializeToString,
            basic__example__pb2.BasicExampleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DuplexStreamingApi(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/basicExample.BasicExample/DuplexStreamingApi',
            basic__example__pb2.BasicExampleRequest.SerializeToString,
            basic__example__pb2.BasicExampleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
